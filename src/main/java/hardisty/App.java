package hardisty;

import java.util.ArrayList;
import java.util.List;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
        System.out.println( "Hello World!" );
        println("one: " + EulerOneImperative());
        println("two: " + EulerTwoImperative());
        println("three: " + EulerThreeImperative());
    }
/**
    Multiples of 3 and 5
    Problem 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
 */
    public static int EulerOneImperative() {
        int sum = 0;
        for (int i = 0; i < 1000; i++) {
            if (isMultiple(i, 3)) {
                sum += i;
            } else if  (isMultiple(i, 5)) {
                sum += i;
            }
        }

        return sum;
    }

    /**
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     find the sum of the even-valued terms.
    */

    public static long EulerTwoImperative() {
        long sum = 0;

        int max = 4000000;
        int firstArg = 0;
        int secondArg = 1;
        int fib;
        while (secondArg < max) {
            fib = firstArg + secondArg;
            if (fib % 2 == 0) {
                sum += fib;
            }
            //println(firstArg + ", " + secondArg + ", " + sum);

            firstArg = secondArg;
            secondArg = fib;
        }

        return sum;
    }
    /**
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    */

    //6857 prime
    //600851475143 target
    //87625999 non-prime factor
    //1471 prime
    //59569 non-prime factor
    //839 prime
    //71 prime
    public static Long EulerThreeImperative() {

        long target = 600_851_475_143L;
        target =  6850;
        target = 137;
        long maxPrimeTarget = 11L;
        //inputLong = target;
        List<Long> primes = new ArrayList<>();

        primes.add(2L);

        Long lastPrime = 2L;
        for (long i = 0L; lastPrime < maxPrimeTarget; i++) {
            lastPrime = nextPrime(primes);
            primes.add(lastPrime);

        }

        for (int i = primes.size() -1; i >= 0; i--) {
            long prime = primes.get(i);
            if (target % prime == 0) {
                println(prime);
                println(target / prime);
                return prime;
            }
        }
        return 0L;
    }

    public static PartlyFactorized factorizeStep(Long input) {
        return null;
    }

    public static Long primeFactorization(Long target) {

        List<Long> primes = new ArrayList<>();

        primes.add(2L);

        Long lastPrime = 2L;
        for (long i = 0L; lastPrime < target; i++) {
            lastPrime = nextPrime(primes);
            primes.add(lastPrime);

        }

        for (int i = primes.size() -1; i > 0; i--) {
            long prime = primes.get(i);
            if (target % prime == 0) {
                return prime;
            }
        }
        return 0L;
    }

    public static long nextPrime(List<Long> primes) {

        long lastPrime = primes.get(primes.size()-1);
        long candidate = lastPrime + 1;
        while (isDivisible(primes, candidate)) {
            candidate = candidate + 1;
        }
        return candidate;
    }

    public static List<Long> primeFactors(Long input) {
        List<Long> factors = new ArrayList<>();

        return factors;
    }

    public static boolean isDivisible(List<Long> divisors, long dividend) {
        for (long  divisor : divisors) {
            if (dividend % divisor == 0) {
                return true;
            }
        }
        return false;
    }

    public static boolean isMultiple(int n, int divisor) {
        if (n % divisor == 0) {
            return true;
        } else {
            return false;
        }
    }
    public static void print(String s) {
        System.out.print(s);
    }
    public static void print(int s) {
        System.out.print(s);
    }

    public static void println(String s) {
        System.out.println(s);
    }
    public static void println(long s) {
        System.out.println(s);
    }

    class PartlyFactorized  {
            Long primePart;
            Long rest;
    }
}
