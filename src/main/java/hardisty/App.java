package hardisty;

import java.util.ArrayList;
import java.util.List;

/**
 * Hello world!
 */
public class App {
    public static void main(String[] args) {
        System.out.println("Hello World!");
        println("one: " + EulerOneImperative());
        println("two: " + EulerTwoImperative());
        println("three: " + EulerThreeImperative());
        println("four: " + EulerFourImperative());
        println("five: " + EulerFiveImperative());
        println("six: " + EulerSix());

        println("sixty: " + EulerFiveImperative());
    }

    /**
     * Multiples of 3 and 5
     * Problem 1
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
     * The sum of these multiples is 23.
     * <p>
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    public static int EulerOneImperative() {
        int sum = 0;
        for (int i = 0; i < 1000; i++) {
            if (isMultiple(i, 3)) {
                sum += i;
            } else if (isMultiple(i, 5)) {
                sum += i;
            }
        }

        return sum;
    }

    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     * <p>
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * <p>
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     */

    public static long EulerTwoImperative() {
        long sum = 0;

        int max = 4000000;
        int firstArg = 0;
        int secondArg = 1;
        int fib;
        while (secondArg < max) {
            fib = firstArg + secondArg;
            if (fib % 2 == 0) {
                sum += fib;
            }
            //println(firstArg + ", " + secondArg + ", " + sum);

            firstArg = secondArg;
            secondArg = fib;
        }

        return sum;
    }

    /**
     * The prime factors of 13195 are 5, 7, 13 and 29.
     * <p>
     * What is the largest prime factor of the number 600851475143 ?
     */

    //6857 prime
    //600851475143 target
    //87625999 non-prime factor
    //1471 prime
    //59569 non-prime factor
    //839 prime
    //71 prime
    public static Long EulerThreeImperative() {

        long target = 600_851_475_143L;
        target = 6850;
        target = 137;
        long maxPrimeTarget = 11L;
        //inputLong = target;
        List<Long> primes = new ArrayList<>();

        primes.add(2L);

        Long lastPrime = 2L;
        for (long i = 0L; lastPrime < maxPrimeTarget; i++) {
            lastPrime = nextPrime(primes);
            primes.add(lastPrime);

        }

        for (int i = primes.size() - 1; i >= 0; i--) {
            long prime = primes.get(i);
            if (target % prime == 0) {
                println(prime);
                println(target / prime);
                return prime;
            }
        }
        return 0L;
    }

    /**
     * Largest palindrome product
     * Problem 4
     * A palindromic number reads the same both ways.
     * The largest palindrome made from the product of two 2-digit numbers is
     * 9009 = 91 × 99.
     * <p>
     * Find the largest palindrome made from the product of two 3-digit numbers.
     */

    public static long EulerFourImperative() {
        long largest = 0L;
        for (long i = 999; i > 0; i--) {
            for (long j = 999; j > 0; j--) {
                long product = i * j;
                if (isPalindrome(product) && product > largest) {
                    largest = product;
                    println("i " + i + ", j " + j + " = " + largest);

                }

            }
        }

        return largest;
    }

    /**
     * Smallest multiple
     * Problem 5
     * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
     * <p>
     * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     */
    public static long EulerFiveImperative() {
        long num = 0;
        long until = 20;
        long candidate = until + 1;
        while (num == 0) {

            if (allMultiples(candidate, until)) {
                num = candidate;
            } else {
                candidate++;
            }
        }


        return num;
    }

    /**
     * Sum square difference
     * Problem 6
     * The sum of the squares of the first ten natural numbers is,
     * <p>
     * 1^2 + 2^2 + ... + 10^2 = 385
     * The square of the sum of the first ten natural numbers is,
     * <p>
     * (1 + 2 + ... + 10)^2 = 552 = 3025
     * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
     * <p>
     * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
     */

    public static long EulerSix() {
        long sum = 0;
        long squares = 0;
        for (long i = 1; i <= 100; i++) {
            sum += i;
            squares += (i * i);
        }
        sum = sum * sum;
        return sum - squares;

    }

    public static boolean allMultiples(long num, long until) {

        for (long i = 1; i <= until; i++) {
            if (num % i != 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * Prime pair sets
     * Problem 60
     * <p>
     * The primes 3, 7, 109, and 673, are quite remarkable.
     * By taking any two primes and concatenating them in any order
     * the result will always be prime.
     * For example, taking 7 and 109, both 7109 and 1097 are prime.
     * The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.
     * <p>
     * Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.
     *
     * @return
     */

    public static long EulerSixtyImperative() {
        List<Long> allPrimes;
        List<Long> candidateSet;

        //procedure:
        //1. add another prime to set of all primes
        //2. permute the set of all primes, considering each subset of 5 with new prime added. consider memoizing on sums
        //3. if winner is found, must be lowest sum, so stop
        //4. if no winner, go to 1


        return 0L;
    }

    public static long sum(List<Long> list) {
        long sum = 0;
        for (long l : list) {
            sum += l;
        }
        return sum;
    }

    public static boolean isPalindrome(long num) {
        String numString = String.valueOf(num);
        boolean answer = true;
        char[] numChars = numString.toCharArray();
        for (int i = 0; i < numChars.length / 2; i++) {
            if (numChars[i] != numChars[numChars.length - 1 - i]) {
                answer = false;
            }
        }
        return answer;
    }


    public static PartlyFactorized factorizeStep(Long input) {
        return null;
    }

    public static Long primeFactorization(Long target) {

        List<Long> primes = new ArrayList<>();

        primes.add(2L);

        Long lastPrime = 2L;
        for (long i = 0L; lastPrime < target; i++) {
            lastPrime = nextPrime(primes);
            primes.add(lastPrime);

        }

        for (int i = primes.size() - 1; i > 0; i--) {
            long prime = primes.get(i);
            if (target % prime == 0) {
                return prime;
            }
        }
        return 0L;
    }

    public static long nextPrime(List<Long> primes) {

        long lastPrime = primes.get(primes.size() - 1);
        long candidate = lastPrime + 1;
        while (isDivisible(primes, candidate)) {
            candidate = candidate + 1;
        }
        return candidate;
    }

    public static List<Long> primeFactors(Long input) {
        List<Long> factors = new ArrayList<>();

        return factors;
    }

    public static boolean isDivisible(List<Long> divisors, long dividend) {
        for (long divisor : divisors) {
            if (dividend % divisor == 0) {
                return true;
            }
        }
        return false;
    }

    public static boolean isMultiple(int n, int divisor) {
        if (n % divisor == 0) {
            return true;
        } else {
            return false;
        }
    }

    public static void print(String s) {
        System.out.print(s);
    }

    public static void print(int s) {
        System.out.print(s);
    }

    public static void println(String s) {
        System.out.println(s);
    }

    public static void println(long s) {
        System.out.println(s);
    }

    public static void println(boolean b) {
        System.out.println(b);
    }

    class PartlyFactorized {
        Long primePart;
        Long rest;
    }
}
